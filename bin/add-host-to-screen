#!/usr/bin/env perl

=head1 NAME

    add-host-to-screen

=head1 SYNOPSIS

    add-host-to-screen <host name> [screen name]

=cut

use strict;
use warnings;
use Data::Dumper;
use FindBin '$RealBin';
use lib "$RealBin/../lib";
use config;
use Pod::Usage;
use Net::Zabbix;


my ($host_name, $screen_name) = @ARGV;
usage() unless $host_name;
$screen_name = 'ds-orgins disks' unless $screen_name;
my @graph_list = ("All disks utilization", "All disks await");

my $config = config->new("$RealBin/../etc/config");

my $z = Net::Zabbix->new(
    $config->{'zabbix-url'},
    $config->{'zabbix-username'},
    $config->{'zabbix-password'},
);

my $screen = get_screen($screen_name);
my $host_id = get_host_id($host_name);

#print Dumper($screen);
my ($x, $y) = get_new_place($screen->{screenitems});

for (my $i = 0; $i <= $#graph_list; $i++) {
    my $graph_name = $graph_list[$i];
    my $graph_id = get_graph_id($host_id, $graph_name);
    
    if ($graph_id) {
        if (check_graph_exisit_in_screen($screen, $graph_id)) {
            die "Graph \"$graph_name\" exist in screen\n";
        } else {
            add_graph_to_screen($screen, $graph_id, $i, $y);
        }
    } else {
        die "Graph $graph_name not exist in host $host_name\n";
    }
}

sub add_graph_to_screen {
    my ($screen, $graph_id, $x, $y) = @_;

    #my $update_screen = $z->raw_request("screenitem", "updatebyposition",
    my $update_screen = $z->create("screenitem",
        {
            x => $x,
            y => $y,
            screenid => $screen->{screenid},
            sort_triggers => 0,
            rowspan => 1,
            colspan => 1,
            resourcetype => 0,
            style => 0,
            dynamic => 0,
            height => 100,
            width => 500,
            resourceid => $graph_id,
        }
    );
}

sub check_graph_exisit_in_screen {
    my ($screen, $graph_id) = @_;
    
    foreach (@{$screen->{screenitems}}) {
        #print "!!!! $_->{resourceid} !!!! $graph_id !!!!\n";
        return 1 if $_->{resourceid} eq $graph_id;
    }

    return 0;
}

sub get_graph_id {
    my ($host_id, $graph_name) = @_;

    my $search_graph = $z->get("graph",
        {
            hostids => $host_id,
        }
    );

    foreach my $graph (@{$search_graph->{result}}) {
        if ($graph->{name} eq $graph_name) {
            return $graph->{graphid}
        }
    }

    return 0
}

sub get_host_id {
    my $host_name = shift;

    my $search_host = $z->get("host",
        {
            filter => {
                name => $host_name,
            }
        }
    );
    
    die Dumper($search_host) if ! $#{$search_host->{result}} == 0;
    return $search_host->{result}[0]->{hostid};
}

sub get_screen {
    my $search_screen = $z->get("screen",
        {
            filter => {
                name => $screen_name,
            },
            output => 'extend',
            selectScreenItems => 'extend',
        }
    );

    die Dumper($search_screen) if ! $#{$search_screen->{result}} == 0;
    return shift(@{$search_screen->{result}});
}


sub get_new_place {
    my ($screenitems) = @_;
    my @place = (0, 0);

    foreach (@$screenitems) {
        if ($_->{y} > $place[1]) {
            @place = ($_->{x}, $_->{y});
        } elsif ($_->{y} == $place[1]) {
            @place = ($_->{x}, $_->{y}) if $_->{x} > $place[0];
        }
    }

    if ($place[0] == 1) {
        $place[0] = 0;
        $place[1]++;
    }

    return @place;
}


sub usage {
    pod2usage(1);
    exit;
}
