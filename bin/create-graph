#!/usr/bin/env perl

=head1 NAME

    create-graph - Make graph inclusive items from all hosts linked selected template


=head1 SYNOPSIS

    create-graph --template <name> --item <name> [ -r] [--graph-name <name>] [--dark-colors]
                [--add] [--width <size> --height <size>] [--graphtype 1|2] [--drawtype 0-5]
                [--calcfunction 1|4|2|7] [--showtriggers] [--delete]

=head2 Options

=over

=item --template

Template name

=item --item

Item name

=item --regexp (-r)

Item name is regexp

=item --graph-name

Graf name. If not set use item name

=item --dark-colors

Darck colors theme

=item --add

Add to exist graph hosts/items from other template

=item --width

Graph width

=item --height

Graph height

=item --graphtype

Graph type: 0=normal, 1=stacked
Default: 0

=item --min-graph-type

0=calculated, 1=fixed
Default: 1

=item --max-graph-type

0=calculated, 1=fixed
Default: 0

=item --min-graph-value

Default: 0

=item --max-graph-value

Default: 100

=item --drawtype

0=line, 1=filled, 2=boldline, 3=dot, 4=dashed, 5=gradient

=item --calcfunction

1=min, 4=max, 2=avg, 7=all Default: 2

=item --showtriggers

Show triggers

=item --delete

Delete graph
    
=item --add-to-screen <screen name>

Add graph to screen

=item --screen-x <width position on screen>

Graph position in screen

=item --clear-screen <screen name>

Delete add screen items

=item --screen-item-halign <0|1|2>

Specifies how the screen item must be aligned horizontally in the cell. 

Possible values: 
0 - (default) center; 
1 - left; 
2 - right.

=item --graph-type

Graph's layout type. 

Possible values: 
0 - (default) normal; 
1 - stacked; 
2 - pie; 
3 - exploded.

=item --item-filter

Filter for LLD. If regexp not work in discovery item names.

=item --item-blacklist

Filter for LLD. Black list regexp

=back

=cut

use strict;
use warnings;
use Data::Dumper;
use FindBin '$RealBin';
use lib "$RealBin/../lib";
use Net::Zabbix;
use Getopt::Long;
use config;
use Pod::Usage;

my $DEBUG = 1;

my $config = config->new("$RealBin/../etc/config");

Getopt::Long::Configure ("bundling");
GetOptions(
    "help|h|?" => sub { usage() },
    "verbose|v+" => \$config->{verbose},
    "debug" => \$config->{debug},
    "template|t=s" => \$config->{template},
    "item|i=s" => \$config->{item},
    "graph-name|g=s" => \$config->{'graph-name'},
    "dark-colors" => \$config->{'dark-colors'},
    "add" => \$config->{add},
    "height=s" => \$config->{height},
    "width=s" => \$config->{width},
    "graphtype=s" => \$config->{graphtype},
    "drawtype=s" => \$config->{drawtype},
    "calcfunction=s" => \$config->{calcfunction},
    "showtriggers" => \$config->{showtriggers},
    "regexp|r" => \$config->{regexp},
    "delete" => \$config->{delete},
    "onehost" => \$config->{onehost},
    "min-graph-value=s" => \$config->{'min-graph-value'},
    "max-graph-value=s" => \$config->{'max-graph-value'},
    "min-graph-type=s" => \$config->{'min-graph-type'},
    "max-graph-type=s" => \$config->{'max-graph-type'},
    "add-to-screen=s" => \$config->{screen},
    "screen-x=s" => \$config->{'screen-x'},
    "host=s" => \$config->{host},
    "clear-screen=s" => \$config->{'clear-screen'},
    "screen-item-halign=s" => \$config->{'screen-item-halign'},
    "graph-type=s" => \$config->{'graph-type'},
    "item-filter=s" => \$config->{'item-filter'},
    "item-blacklist=s" => \$config->{'item-blacklist'},
);

my $z = Net::Zabbix->new(
     $config->{'zabbix-url'},
     $config->{'zabbix-username'},
     $config->{'zabbix-password'},
);

clear_screen($config->{'clear-screen'}) if $config->{'clear-screen'};

$config->{width} = 800 unless $config->{width};
$config->{height} = 200 unless $config->{height};
$config->{graphtype} = 0 unless $config->{graphtype};
$config->{drawtype} = 0 unless $config->{drawtype};
$config->{calcfunction} = 7 unless $config->{calcfunction};
$config->{showtriggers} = 0 unless $config->{showtriggers};
$config->{'min-graph-value'} = 0 unless $config->{'min-graph-value'};
$config->{'max-graph-value'} = 100 unless $config->{'max-graph-value'};
$config->{'min-graph-type'} = 1 unless defined($config->{'min-graph-type'});
$config->{'max-graph-type'} = 0 unless $config->{'max-graph-type'};
$config->{'screen-item-halign'} = 0 unless $config->{'screen-item-halign'};
$config->{'graph-type'} = 0 unless $config->{'graph-type'};
$config->{'item-filter'} = '.' unless $config->{'item-filter'};

usage() unless $config->{item};
usage() unless $config->{host};
usage() unless $config->{template};
$config->{'graph-name'} = $config->{item} unless $config->{'graph-name'};

my $colors = {
    dark => [
        "5299AD", # blue1
        "5D549A", # violet
        "87B457", # green
        "CF545E", # red
        "CDDA13", # lemon
        "5DAE99", # turquise
        "DD844C", # orange
        "AE5C8A", # mauve
        "BD9F83", # ltbrown
        "6B9BD4", # blue2
        "B75F73", # red-brown
        "646560", # kaky
        "335098", # deepblue
        "5FBFDB", # bleu
        "D1CE85", # yellow
        "909090", # grey
        "A16254", # brown
        "E8678D", # pink
        "62B55A", # deepgreen
        "A599AD", # greypurple
        "6A5DD9", # violet2
    ],

    light => [
        "98D6E7", # blue1
        "9E7EDF", # violet
        "BDDA83", # green
        "EF747E", # red
        "EDFA33", # lemon
        "7EC392", # tuquise
        "EDA46C", # orange
        "DF93D7", # mauve
        "E2BB91", # ltbrown
        "A0CBEA", # blue2
        "CB868B", # red-brown
        "77897D", # kaky
        "5370B8", # deepblue
        "76DAF7", # bleu
        "EAD770", # yellow
        "AEAEAE", # grey
        "B97A6F", # brown
        "E8849D", # pink
        "95D36E", # deepgreen
        "B7AACF", # greypurple
        "8A7DF9", # violet2
    ],
    count => -1,
    theme => 'light',
};

$colors->{'theme'} = 'dark' if $config->{'dark-colors'};
my $get_host;

if ($config->{host} eq 'from-template') {
    my $template_res = $z->get("template",
        {
            filter => {
                name => $config->{template},
            }
        }
    );

    die "Template $config->{template} not found\n" if $#{$template_res->{result}} != 0;
    
    my $template_id = $template_res->{result}[0]->{templateid};
    $get_host = $z->get("host", { templateids => $template_id });
} else {
    $get_host = $z->get("host",
        {
            filter => {
                name => $config->{host},
            }
        }
    );
}

my $host_id;

if ($get_host->{result}) {
    $host_id = $get_host->{result}[0]->{hostid};
} else {
    die "Can't found host: $config->{host}\n";
}

my $graph_id = create_graph($host_id);

if ($graph_id) {
    add_to_screen($graph_id) if $config->{screen};
}

sub add_to_screen {
    my ($graph_id) = @_;
    my $x = int($config->{'screen-x'} - 1);

    my $screen = get_screen($config->{screen});
    #print "\$screen: " . Dumper($screen);

    my $y = get_new_place($screen->{screenitems}, $graph_id);

    my $vsize = $y;

    if ($x == 0) {
        $y++;

        my $update_screen_opts = {
            screenid => $screen->{screenid},
            vsize => $y + 1,
        };

        $update_screen_opts->{hsize} = int($x + 1) if $screen->{hsize} <= $x;
        #print "\$update_screen_opts: " . Dumper($update_screen_opts);
    
        my $update_screen = $z->update("screen", $update_screen_opts);
        #print "\$update_screen: " . Dumper($update_screen);
    }


    print "\$x: $x, \$y: $y\n";

    my $update_screenitem = $z->create("screenitem",
        {
            x => $x,
            y => $y,
            screenid => $screen->{screenid},
            sort_triggers => 0,
            rowspan => 1,
            colspan => 1,
            resourcetype => 0,
            style => 0,
            dynamic => 0,
            height => $config->{height},
            width => $config->{width},
            resourceid => $graph_id,
            halign => $config->{'screen-item-halign'},
        }
    );
    
    #print "\$update_screenitem: " . Dumper($update_screenitem);
}

sub create_graph {
    my ($hostid_list) = @_;

    print "Get items from this hosts\n";
    my $item_list = get_items($hostid_list);
    #print Dumper($item_list);
    #print Dumper($item_list);exit;

    print "Make items list\n";
    
    my $nextcolor = sub {
        $colors->{count}++;
        $colors->{count} = 0 if $colors->{count} > $#{$colors->{$colors->{theme}}};
        return $colors->{count};
    };
    
    my @items = map {
        $_ = {
            itemid => $_->{itemid},
            color => $colors->{$colors->{theme}}[&$nextcolor],
            calc_fnc => $config->{calcfunction},
            drawtype => $config->{drawtype},
        };
    } grep { 
        $_->{'key_'} =~ /$config->{'item-filter'}/;
        $_->{'key_'} !~ /$config->{'item-blacklist'}/ if $config->{'item-blacklist'};
    } @$item_list;
    
    #print Dumper(\@items);
    my $filter_opts = {
        name => $config->{'graph-name'},
    };

    if ($config->{onehost}) {
        $filter_opts->{hostid} = $hostid_list;
    }

    my $graph_list = $z->get('graph', {
        filter => $filter_opts,
    });

    if ($config->{add}) {
        if ($#{$graph_list->{result}} >= 0) {
            print "Get graph items\n";
            my $items_list = $z->get('graphitem', {
                graphids => $graph_list->{result}->[0]->{graphid},
            });
    
            if ($#{$items_list->{result}} >=0) {
                foreach (@{$items_list->{result}}) {
                    push @items, {
                        itemid => $_->{itemid},
                        color => $colors->{$colors->{theme}}[&$nextcolor],
                    };
                }
            }
    
            print "Update graph\n";
    
            my $update_graph = $z->update('graph', {
                graphid => $graph_list->{result}->[0]->{graphid},
                name => $config->{'graph-name'},
                gitems => \@items,
                width => $config->{width},
                height => $config->{height},
                graphtype => $config->{graphtype},
                showtriggers => $config->{showtriggers},
                yaxismin => $config->{'min-graph-value'},
                yaxismax => $config->{'max-graph-value'},
                ymin_type => $config->{'min-graph-type'},
                ymax_type => $config->{'max-graph-type'},
                graphtype => $config->{'graph-type'},
            });
    
            #print Dumper($update_graph);
        } else {
            print "Graph not found\n";
            exit 1;
        }
    
    } else {
    
        if ($#{$graph_list->{result}} >= 0) {
            print "Graph exist ID(s): ";
            my @del_list = map { $_ = $_->{graphid} } @{$graph_list->{result}};
            print join(", ", @del_list) . "\n";
            print "Delete graph(s)\n";
            my $delete_graph = $z->delete('graph', \@del_list); 
            print "\$delete_graph: " . Dumper($delete_graph) . "\n";
        }
    
        return 0 if $config->{delete};
        
        print "Create new graph\n";

        my $create_graph = $z->create('graph', {
            name => $config->{'graph-name'},
            width => $config->{width},
            height => $config->{height},
            gitems => \@items,
            graphtype => $config->{graphtype},
            showtriggers => $config->{showtriggers},
            yaxismin => $config->{'min-graph-value'},
            yaxismax => $config->{'max-graph-value'},
            ymin_type => $config->{'min-graph-type'},
            ymax_type => $config->{'max-graph-type'},
            graphtype => $config->{'graph-type'},
        });
    
        if ($create_graph->{result} && $create_graph->{result}->{graphids}) {
            my $graph_id = shift(@{$create_graph->{result}->{graphids}});
            print "Graph_id: $graph_id\n";
            return $graph_id;
        } else {
            if ($create_graph->{error}) {
                $create_graph->{error}->{message} =~ s/\.$//;
                printf("%s: %s\n", $create_graph->{error}->{message}, $create_graph->{error}->{data});
            } else {
                print Dumper($create_graph) . "\n";
            }
            exit 1;
        }
    }
}

sub get_items {
    my ($hosts) = @_;

    my $filter_opts = {};

    unless ($config->{regexp}) {
        $filter_opts = {
            name => $config->{item},
        };
    }

    my $item_list = $z->get("item", {
        hostids => $hosts,
        filter => $filter_opts,
    });

    if ($#{$item_list->{result}} >= 0) {
        if ($config->{regexp}) {
            my @r = grep { ($_->{name} =~ /$config->{item}/) && ($_->{name} !~ /.*{#.*}/) } @{$item_list->{result}};
            return \@r;
        } else {
            return $item_list->{result};
        }
    } else {
        print "Can't found items\n";
        exit 1;
    }
}



sub get_screen {
    my ($screen_name) = @_;

    my $search_screen = $z->get("screen",
        {
            filter => {
                name => $screen_name,
            },
            output => 'extend',
            selectScreenItems => 'extend',
        }
    );

    die "Get_screen['$screen_name']: " . Dumper($search_screen) if ! $#{$search_screen->{result}} == 0;
    return shift(@{$search_screen->{result}});
}

sub clear_screen {
    my ($screen_name) = @_;

    my $screen = get_screen($screen_name);
    my $screen_id = $screen->{screenid};
    map { $_ = $_->{screenitemid} } @{$screen->{screenitems}};

    $z->delete("screenitem", $screen->{screenitems});

    my $update_screen = $z->update("screen",
        {
            screenid => $screen_id,
            hsize => 3,
            vsize => 1,
        }
    );


    exit;
}

sub get_new_place {
    my ($screenitems, $graph_id) = @_;
    my $max = 0;

    foreach (@$screenitems) {
        $max = $_->{y} if $max < $_->{y};
    }

    return $max;
}

sub usage {
    pod2usage(1);
    exit;
}
